[["index.html", "Big Data Case Studies Chapter 1 Introduction", " Big Data Case Studies Benjamin Buchwitz 2021-02-10 Chapter 1 Introduction This repo contains course materials. "],["getting-started.html", "Chapter 2 Getting Started 2.1 Sensor Dev Env 2.2 Gateway Dev Env", " Chapter 2 Getting Started Wow content Move on 2.1 Sensor Dev Env Content 2.2 Gateway Dev Env test test2 test3 "],["sensor.html", "Chapter 3 Sensor 3.1 Initilizing acceleration logging 3.2 Retrieving data from FIFO 3.3 Using the data by hearbeat 3.4 Initialization during boot", " Chapter 3 Sensor The following figure shows the high level architecture of acceleration data logging in Ruuvi Tag. All configuration is done via the gateway. It communicates with the Ruuvi Tag using the Nordic UART interface via GATT messages transported by Blutooth Low Energy (BLE). Most logic regarding acceleration logging is implemented inside the module app_accelerometer_logging.c. Three usecases are shown in this figure. 3.1 Initilizing acceleration logging The initialization is shown with blue arrows and numbers in black circles until #4. To activate acceleration logging the gateway sends the message 0xFA 0xFA 0x0A 0x01. In general GATT messages are handled by the function handle_comms() inside the module app_comm.c. Message regarding acceleration logging are handled by the function handle_lis2dh12_comms() inside the same module. After receiving the message to activate acceleration logging the function app_enable_sensor_logging() inside the module app_accelerometer_logging.c in called (1). The first step in activation is to check if some conditions are fulfilled. The function returns an error code if acceleration logging is already active or if it is called on a sensor which does not include an LIS2DH12. This check is done by calling find_sensor() inside of app_sensor.c (2). This function return the sensor context. The sensor context consists of several information abut the sensor. In the next step assiciates the function on_fifo_full() from app_accelerometer_logging.c with the interrupt pin retrieved from the sensor context (3). The last step is to activate FIFO and interrupt generation inside the LIS2DH12. This is done by calling two functions from the sensor context. At least the function pointer to data_get() inside the sensor context is replaced by the pointer to the function lis2dh12_logged_data_get(). 3.2 Retrieving data from FIFO When FIFO is full inside LIS2DH12 the interrupt starts the function on_fifo_full(). This functions does not directly handle the new data. It schedules a call to fifo_full_handler(). Instead of on_fifo_full() this is called in the main thread of the application. When processing is done inside a function inside an interrupt context this prevents processing of other interrupt. This should be avoided. Inside fifo_full_handler() the FIFO from LIS2DH12 is read (5). The values are store in the memory in raw format to be ready to present them to the function lis2dh12_logged_data_get() which is important for heartbesat. In parallel the raw values are compacted by removing all unused bits. This is done by the functions pack8/10/12(). A timestamp is added to the compacted values. These values are handover to the ringbuffer which writes them to flash (6). 3.3 Using the data by hearbeat This usecase is shown with magenta arrows and numbers inside magenta circles in the figure above. The heartbeat retrieves the values from all sensors by calling the function app_sensor_get() inside the module app_sensors.c. In the original setup this function calls ri_lis2dh12_data_get() inside of ruuvi_interface_lis2dh12.c. During initialization this function is replaced by lis2dh12_logged_data_get(). lis2dh12_logged_data_get() retrieves the raw accleration values from memory. Then the values are parsed by calling ri_lis2dh12_raw_data_parse() and returned to the heartbeat. 3.4 Initialization during boot All sensor initialization is done inside setup() from main.c. This function calls app_acc_logging_init() inside app_accelerometer_logging.c. The function checks if the ringbuffer exists. If this is true it activates acceleration logging as described earlier. "],["gateway.html", "Chapter 4 Gateway", " Chapter 4 Gateway Lorem ipsum "],["backend.html", "Chapter 5 Backend", " Chapter 5 Backend Lorem ipsum "],["sensor-1.html", "Chapter 6 Sensor 6.1 Hardware 6.2 Software", " Chapter 6 Sensor 6.1 Hardware 6.1.1 External Flash Memory For more extensive data logging external memory (not in the SoC) is required. The most promising candidate is the Macronix MX25R as it supports low power battery driven applications, is quite flexible in terms of required voltage and is also used in some newer Nordic reference designs. 6.1.2 Board Redesign The current sensor board revision features two antennas, while the bluetooth antenna is required and onboard NFC antenna is not used, therefore the board footprint could be smaller. Inspiration for a board revision could be drawn from the discontinued nRF51822 Bluetooth Smart Beacon Kit reference design. 6.2 Software 6.2.1 General ToDo Remotely customizing the Heartbeat interval (persistence required) Flexibilizing the Logging Rate so that it can be precisely controlled and the sensor supports rates that the accelerometer does not support natively (e.g. 2 Hz) Adapted Advertisement Message Format: Indicate amount of used internal storage to be used by the gateway to trigger connections and manage dowloading of logged data. 6.2.2 Security Questions: * Can Advertisements be encrypted? * How to manage access for downloading internally stored data and allow for encrypted transportation? "],["gateway-1.html", "Chapter 7 Gateway 7.1 Hardware 7.2 Software", " Chapter 7 Gateway 7.1 Hardware 7.1.1 Uninterruptible Power Supply For operating in remote environments the gateway should be equipped with a Uninterruptible Power Supply (UPS). This allows tolerating short power outages and should be configurable to user alternative energy sources such as solar panel or wind turbines to allow for autonomous operation. The most promising products are: * PiJuice Hat * Sixfab UPS Power Hat * UPS PIco HV4.0B Advanced Questions: * How to work with unregulated power sources such as cheap/raw solar panels? * Which UPS provides the best software (Free/Open/Functionality/Reliability)? 7.1.2 Camera A camera is required to record a video stream that is used to derive the ground truth for classification tasks. Use cases can be extended to perform analytics based on the captured images or the video stream. 7.1.2.1 RPi Camera The main camera for the gateway will be the original camera module offered by the Raspberry Pi Foundation, which provides the benefit of an actively maintained software interface and guaranteed compatibility with the used Single Board Computer (SBC). Additionally it is available in two versions, a normal and a NoIR (Night Vision) Version. Questions: * How to match the video feed with the data that is received via Bluetooth? * Which illumination is required for the NoIR Version? * Is it possible to mechanically align the angles (perfect Video overlay) and use both camera versions simultaneously? 7.1.2.2 Thermal Camera For some use cases it may be reasonable to monitor temperatures via a thermal camera. The thermal camera should be seen as an optional addition to the gateway. Questions: * Which module should be chosen in terms of features (especially resolution and connection) and size? * How to align images from all installed cameras (perfectly aligned video stream)? 7.1.3 3g/4g/5g Module Autonomous operation requires a network connection for control and (at least partial) data transfer. Questions: * Which module can be used solely via the GPIO Header (no USB Cable)? * Which module offers the best software interaface( Free/Open/Functionality/Reliability)? 7.1.4 Bluetooth Hardware Alternating and/or extending the Bluetooth Hardware serves two purposes. Having multiple bluetooth devices should allow for monitoring more sensors simultaneously. Including at least one device with support for external antennas would also allow for increased range. Achieving this goal could can be done using at least one (but potentially both) of the following measures: Adding external Bluetooth Hardware Changing the Single Board Computer (SBC) 7.1.5 Case Heat Sink / Active Ventilation 7.2 Software Scheduling and parallelizing download of logged Data "],["backend-1.html", "Chapter 8 Backend", " Chapter 8 Backend Lorem ipsum "],["contributors.html", "Contributors WS 2020 / 2021 SS 2021", " Contributors List of Contributors WS 2020 / 2021 AS FH TH VB SS 2021 "],["system-info.html", "System Info", " System Info Sys.time() ## [1] &quot;2021-02-10 11:11:22 UTC&quot; sessionInfo() ## R version 4.0.3 (2020-10-10) ## Platform: x86_64-apple-darwin17.0 (64-bit) ## Running under: macOS Catalina 10.15.7 ## ## Matrix products: default ## BLAS: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib ## LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib ## ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## other attached packages: ## [1] kableExtra_1.3.1 knitr_1.31 ## ## loaded via a namespace (and not attached): ## [1] bookdown_0.21 viridisLite_0.3.0 digest_0.6.27 R6_2.5.0 ## [5] lifecycle_0.2.0 magrittr_2.0.1 scales_1.1.1 evaluate_0.14 ## [9] httr_1.4.2 rlang_0.4.10 stringi_1.5.3 rstudioapi_0.13 ## [13] xml2_1.3.2 rmarkdown_2.6 webshot_0.5.2 tools_4.0.3 ## [17] stringr_1.4.0 glue_1.4.2 munsell_0.5.0 xfun_0.20 ## [21] yaml_2.2.1 compiler_4.0.3 colorspace_2.0-0 rvest_0.3.6 ## [25] htmltools_0.5.1.1 "]]
